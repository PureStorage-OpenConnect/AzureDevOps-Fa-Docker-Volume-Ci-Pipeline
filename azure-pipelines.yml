trigger:
- master

variables:
- name: ssdtProject
  value: 'AzureDevOps-Fa-Docker-Volume-Ci-Pipeline'

jobs:
#
# --------------------------------------------------------------------------------------
# 1. Ensure environment is clean following any previous runs
# --------------------------------------------------------------------------------------
#
- job: CleanEnvironment
  pool: $(linuxAgentPool)
  steps:
  - script: |
      sudo docker rm -f $(sudo docker ps -a -q)
      sudo docker volume rm -f $(sudo docker volume ls | grep -v $(seedDockerVolume))
    displayName: 'Clean up old sidecar containers and volumes'

#
# --------------------------------------------------------------------------------------
# 2. Create SQL Server sidecar containers with cloned copies of the 'Seed' docker volume
# --------------------------------------------------------------------------------------
#
- job: BuildTestEnvironment
  pool: $(linuxAgentPool)
  dependsOn: CleanEnvironment
  strategy:
    matrix:
      sidecar_01:
        container: SideCar01
        externalPort: 1433
        dockerVolume: Volume01
        tSQLtTestClass: Test01
      sidecar_02:
        container: SideCar02
        externalPort: 1434
        dockerVolume: Volume02
        tSQLtTestClass: Test02
      sidecar_03:
        container: SideCar03
        externalPort: 1435
        dockerVolume: Volume03
        tSQLtTestClass: Test03
      sidecar_04:
        container: SideCar04
        externalPort: 1436
        dockerVolume: Volume04
        tSQLtTestClass: Test04
  steps:
  - script: |
      sudo docker volume create --driver pure --opt o=size=80g $(dockerVolume) 
      sudo docker run -v $(dockerVolume):/var/opt/mssql -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=$(saPassword))' -p $(externalPort):1433 --name $(container) -d mcr.microsoft.com/mssql/server:2017-latest 
      sudo docker stop $(container)
    displayName: 'Create sidecar'
  - template: templates/clone-docker-volume.yml  
    parameters:
      pfaEndpoint:  '$(pfaEndpoint)'
      pfaApiToken:  '$(pfaApiToken)'
      sourceVolume: 'ca-docker-$(seedDockerVolume)'
      targetVolume: 'ca-docker-$(dockerVolume)'
  - script: |
      sudo docker start $(container)

#
# --------------------------------------------------------------------------------------
# 3. Build the artifact to deploy
# --------------------------------------------------------------------------------------
#
- job: BuildDacPac
  pool: $(winAgentPool)
  workspace:
    clean: all
  steps:
  - task: MSBuild@1
    displayName: 'Build DACPAC'
    inputs:
      solution: '$(ssdtProject).sln'
      msbuildArguments: '/property:OutDir=bin\Release'
  - task: CopyFiles@2
    inputs:
      contents: '**'
      targetFolder: $(System.DefaultWorkingDirectory)\$(ssdtProject)\bin\Release

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: DacPac
  - task: CmdLine@2
    inputs:
      script: 'echo $(Build.ArtifactStagingDirectory)' 

#
# --------------------------------------------------------------------------------------
# 4. Deploy the artifact and run tests in PARALLEL
# --------------------------------------------------------------------------------------
#
- job: DeployAndTestDacPac
  dependsOn: 
  - BuildDacPac
  - BuildTestEnvironment
  pool: $(winAgentPool)
  strategy:
    matrix:
      sidecar_01:
        externalPort: 1433
        tSQLtTestClass: 'DecL_Tax'
      sidecar_02:
        externalPort: 1434
        tSQLtTestClass: 'IncL_Tax'
      sidecar_03:
        externalPort: 1435
        tSQLtTestClass: 'DecPS_AvailQty'
      sidecar_04:
        externalPort: 1436
        tSQLtTestClass: 'IncPS_AvailQty'
  variables:
  - name: connString
    value: 'server=$(sideCarServerIpAddr),$(externalPort);database=tpch;user id=sa;password=$(saPassword)'
  - name: dacPacPath
    value: '$(System.DefaultWorkingDirectory)\$(ssdtProject)\bin\Release\$(ssdtProject).dacpac'
  steps:
  - script: |
      sqlcmd.exe -S $(sideCarServerIpAddr),$(externalPort) -d tpch -U sa -P $(saPassword) -Q "EXEC sp_configure 'Show Advanced Options', 1; RECONFIGURE;"
      sqlcmd.exe -S $(sideCarServerIpAddr),$(externalPort) -d tpch -U sa -P $(saPassword) -Q "EXEC sp_configure 'clr enabled', 1; RECONFIGURE;"
      sqlcmd.exe -S $(sideCarServerIpAddr),$(externalPort) -d tpch -U sa -P $(saPassword) -Q "EXEC sp_configure 'clr strict security', 0; RECONFIGURE;"
      sqlcmd.exe -S $(sideCarServerIpAddr),$(externalPort) -d master -U sa -P $(saPassword) -Q "ALTER DATABASE tpch SET RECOVERY SIMPLE;"
    displayName: 'Prepare sidecar for tSQLtCLR assembly'
  - script: sqlpackage.exe /Action:Publish /sf:"$(dacPacPath)" /tcs:"$(connString)" /p:ExcludeObjectType=Logins
    displayName: 'Publish DacPac'
  - script: sqlcmd.exe -S $(sideCarServerIpAddr),$(externalPort) -d tpch -U sa -P $(saPassword) -Q "EXEC tSQLt.Run $(tSQLtTestClass);"
    displayName: 'Execute tSQLt Tests'
  - script: sqlcmd.exe -S $(sideCarServerIpAddr),$(externalPort) -d tpch -U sa -P $(saPassword) -y0 -Q "SET NOCOUNT ON;EXEC tSQLt.XmlResultFormatter;" -o $(System.DefaultWorkingDirectory)\$(tSQLtTestClass).xml
    displayName: 'Render tSQLt Results in XML'

#
# --------------------------------------------------------------------------------------
# 5. Aggregate the test results
# --------------------------------------------------------------------------------------
#
- job: PublishTestResults
  dependsOn: 
  - DeployAndTestDacPac
  pool: $(winAgentPool)
  steps:
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '*.xml' 
      searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
      mergeTestResults: true
      failTaskOnFailedTests: true
    displayName: 'Publish tSQLt Test Results'